# --- Build System ---
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# --- Project Metadata ---
[project]
# Core Metadata
name = "gemini-batch"
version = "0.9.0"
description = "A framework for batch processing with Google's Gemini API"
readme = "README.md"
authors = [{ name = "Sean Brar", email = "hello@seanbrar.com" }]
license = "MIT"

# Requirements
requires-python = ">=3.13"
dependencies = [
    "Pillow~=11.2",
    "PyPDF2~=3.0",
    "google-genai~=1.20",
    "httpx~=0.27",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.8.0",
    "python-dotenv~=1.1",
    "python-magic~=0.4.27",
]

[project.urls]
Homepage = "https://github.com/seanbrar/gemini-batch-prediction"
Repository = "https://github.com/seanbrar/gemini-batch-prediction"

[project.optional-dependencies]
dev = [
    "mypy>=1.17.0",
    "pandas-stubs>=2.3.0",
    "pip-tools>=7.4.1",
    "pre-commit>=4.2.0",
    "pydantic>=2.11.7",
    "pyfakefs>=5.9.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.2.1",
    "pytest-golden>=0.2.2",
    "pytest-mock>=3.14.1",
    "python-semantic-release==10.2.0",
    "ruff>=0.12.2",
    "vulture>=2.14",
    # Docs tooling
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.6.0",
    "mkdocstrings[python]>=0.25.0",
    "mkdocstrings-python>=1.10.0",
    "types-PyYAML>=6.0.12",
]
viz = ["matplotlib~=3.10", "pandas~=2.3", "seaborn~=0.13"]
all = ["gemini-batch[dev,viz]"]

# --- Console Scripts ---
[project.scripts]
gb-config = "gemini_batch.config.core:main"

# --- Tool Configurations ---

# --- Coverage ---
[tool.coverage.run]
source = ["src/gemini_batch"]
omit = [
    "setup.py",
    "src/gemini_batch/__init__.py",
    "src/gemini_batch/extensions/visualization.py",
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "def __repr__",
]

[tool.coverage.html]
directory = "coverage_html_report"

# --- MyPy ---
[tool.mypy]
python_version = "3.13"
disallow_untyped_defs = true
namespace_packages = true
show_error_codes = true
strict = true
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# --- Pytest ---
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    # Basic options
    "-v",
    "--import-mode=importlib",
]
enable_assertion_pass_hook = true
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(name)-40s - %(levelname)-8s - %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

markers = [
    "contract: Architectural contract tests (fast)",
    "unit: Unit tests (fast)",
    "integration: Cross-component integration tests (may be slow)",
    "characterization: Golden file/snapshot tests (fast)",
    "golden_test: Golden file tests (alias; legacy marker)",
    "workflows: CI/CD workflow tests (fast)",
    "slow: Tests that take > 1s (subset of integration)",
    "api: Tests requiring external API (slow)",
    "security: Security and secret handling tests",
    "allow_dotenv: Opt-in to load .env in a specific test",
    "allow_real_home_config: Opt-in to use the real home config path",
    "allow_env_pollution: Opt-in to keep current env (no cleanup)",
    "smoke: Very fast, critical path checks (<1m)",
    "scenario: Curated advanced end-to-end scenarios",
    "legacy: Legacy tests kept for reference/quarantine",
]

# --- Ruff ---
[tool.ruff]
target-version = "py313"
line-length = 88
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "*.egg-info",
    "__pycache__",
    "build",
    "dist",
    "venv",
    "src/gemini_batch/_legacy",
]

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "F",   # pyflakes
    "FBT", # flake8-boolean-trap
    "I",   # isort
    "ICN", # flake8-import-conventions
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S",   # bandit
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TC",  # flake8-type-checking
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
]
ignore = [
    "COM812", # Trailing comma missing
    "COM819", # Trailing comma prohibited
    "E501",   # Line too long (handled by formatter)
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"cookbook/*" = ["S105", "S106", "T20", "D103", "D", "S"]
"notebooks/*" = ["T201", "RET504", "S110", "RUF001", "N814", "UP038", "E402"]
"tests/*" = ["D", "N806", "S101", "S105", "S106", "S108"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["gemini_batch"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

# --- Semantic Release ---
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
build_command = "python -m pip install --upgrade pip build && python -m build"
tag_format = "v{version}"
allow_zero_version = true
major_on_zero = false

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
mode = "update"
insertion_flag = "<!-- PSR-INSERT-FLAG -->"
exclude_commit_patterns = [
    "build(.*):",    # build system - internal dependency management
    "ci(.*):",       # continuous integration - internal CI/CD
    "chore(.*):",    # chores - internal maintenance
    "refactor(.*):", # refactoring - internal code organization
    "style(.*):",    # code style - internal formatting
    "test(.*):",     # testing - internal test changes
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true
lstrip_blocks = true
trim_blocks = true

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

# --- Setuptools ---
[tool.setuptools.packages.find]
where = ["src"]
exclude = ["examples*", "notebooks*", "tests*"]

[tool.setuptools.package-data]
gemini_batch = ["py.typed"]
