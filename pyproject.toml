# --- Build System ---
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# --- Project Metadata ---
[project]
# Core Metadata
name = "gemini-batch"
version = "0.7.0"
description = "A framework for batch processing with Google's Gemini API"
readme = "README.md"
authors = [{ name = "Sean Brar", email = "hello@seanbrar.com" }]
license = "MIT"

# Requirements
requires-python = ">=3.13"
dependencies = [
    "Pillow~=11.2",
    "PyPDF2~=3.0",
    "google-genai~=1.20",
    "httpx~=0.27",
    "python-dotenv~=1.1",
    "python-magic~=0.4.27",
]

[project.urls]
Homepage = "https://github.com/seanbrar/gemini-batch-prediction"
Repository = "https://github.com/seanbrar/gemini-batch-prediction"

[project.optional-dependencies]
dev = [
    "mypy>=1.17.0",
    "pip-tools>=7.4.1",
    "pre-commit>=4.2.0",
    "pydantic>=2.11.7",
    "pyfakefs>=5.9.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-golden>=0.2.2",
    "pytest-mock>=3.14.1",
    "python-semantic-release==10.2.0",
    "ruff>=0.12.2",
    "vulture>=2.14",
]
viz = ["matplotlib~=3.10", "pandas~=2.3", "seaborn~=0.13"]
all = ["gemini-batch[dev,viz]"]

# --- Tool Configurations ---

# --- Coverage ---
[tool.coverage.run]
source = ["src/gemini_batch"]
omit = [
    "setup.py",
    "src/gemini_batch/__init__.py",
    "src/gemini_batch/analysis/visualization.py",
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "def __repr__",
]

[tool.coverage.html]
directory = "coverage_html_report"

# --- MyPy ---
[tool.mypy]
python_version = "3.13"
disallow_untyped_defs = true
namespace_packages = true
show_error_codes = true
strict = true
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# --- Pytest ---
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    # Basic options
    "-v",
    "--import-mode=importlib",
]
enable_assertion_pass_hook = true

# --- Ruff ---
[tool.ruff]
target-version = "py313"
line-length = 88
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "*.egg-info",
    "__pycache__",
    "build",
    "dist",
    "tests_old",     # TODO: Remove after old tests cleanup
    "venv",
]

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "F",   # pyflakes
    "FBT", # flake8-boolean-trap
    "I",   # isort
    "ICN", # flake8-import-conventions
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S",   # bandit
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TC",  # flake8-type-checking
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
]
ignore = [
    "COM812", # Trailing comma missing
    "COM819", # Trailing comma prohibited
    "E501",   # Line too long (handled by formatter)
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*" = ["S105", "S106", "T20"]
"notebooks/*" = ["T201"]
"tests/*" = ["D", "N806", "S101", "S105", "S106", "S108"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["gemini_batch"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

# --- Semantic Release ---
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
allow_zero_version = true
build_command = "python -m build"
major_on_zero = false
tag_format = "v{version}"
upload_to_pypi = false

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "^build",
    "^chore",
    "^docs",
    "^ci",
    "^refactor",
    "^style",
    "^test",
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

# --- Setuptools ---
[tool.setuptools.packages.find]
where = ["src"]
exclude = ["examples*", "notebooks*", "tests*"]

[tool.setuptools.package-data]
gemini_batch = ["py.typed"]
