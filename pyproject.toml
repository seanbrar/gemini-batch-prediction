[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gemini-batch"
version = "0.7.0"
description = "A framework for batch processing with Google's Gemini API"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Sean Brar", email = "hello@seanbrar.com"}
]
requires-python = ">=3.13"
dependencies = [
    "google-genai>=1.20.0",
    "python-dotenv>=1.1.0",
    "PyPDF2>=3.0.1",
    "Pillow>=11.2.1",
    "python-magic>=0.4.27",
    "httpx>=0.27.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1",
    "pyfakefs>=5.0.0",
    "pydantic>=2.0.0",
    "ruff>=0.5.0",
    "pip-tools",
    "vulture",
    "pytest-golden",
    "mypy>=1.0.0",
    "pre-commit>=4.0.0",
]
viz = [
    "matplotlib>=3.10.3",
    "seaborn>=0.13.2",
    "pandas>=2.3.0",
]
# Combined group for easy installation
all = [
    "gemini-batch[dev,viz]",
]

[project.urls]
Homepage = "https://github.com/seanbrar/gemini-batch-prediction"
Repository = "https://github.com/seanbrar/gemini-batch-prediction"

# --- Build, Test, and Coverage Tools ---

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["notebooks*", "tests*", "examples*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--import-mode=importlib",
    "--cov=gemini_batch",
    "--cov-report=html:coverage_html_report",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "-v"
]
enable_assertion_pass_hook = true

[tool.coverage.run]
source = ["src/gemini_batch"]
omit = [
    "tests/*",
    "src/gemini_batch/__init__.py",
    "src/gemini_batch/analysis/visualization.py",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]

[tool.coverage.html]
directory = "coverage_html_report"

# --- MyPy Configuration ---

[tool.mypy]
python_version = "3.13"
disallow_untyped_defs = true
namespace_packages = true
show_error_codes = true
strict = true
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# --- Ruff Linter and Formatter Configuration ---

[tool.ruff]
line-length = 88
target-version = "py313"

exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "*.egg-info",
    "__pycache__",
    "build",
    "dist",
    "venv",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "D",    # pydocstyle
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "N",    # pep8-naming
    "PIE",  # flake8-pie
    "PYI",  # flake8-pyi
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff-specific rules
    "S",    # bandit
    "SIM",  # flake8-simplify
    "T20",  # flake8-print
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
]
ignore = [
    "COM812", # Trailing comma missing
    "COM819", # Trailing comma prohibited
    "E501",   # Line too long (handled by formatter)
]
fixable = ["ALL"]
unfixable = []

# Allow unused variables when prefixed with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*" = [
    "S105",
    "S106",
    "T20",
]
"tests/*" = [
    "D",
    "N806",
    "S101",
    "S105",
    "S106",
    "S108",
]


[tool.ruff.lint.isort]
known-first-party = ["gemini_batch"]
force-sort-within-sections = true
split-on-trailing-comma = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.pydocstyle]
convention = "google"
