name: Release

"on":
  # Manual trigger only - releases should be intentional
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in no-op mode to preview changes'
        required: false
        type: boolean
        default: true

jobs:
  release:
    runs-on: ubuntu-latest
    # Prevent multiple releases from running simultaneously
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false
    # Minimal permissions needed for PSR action
    permissions:
      contents: write # Needed for creating releases and pushing tags

    steps:
      # Checkout with full history for semantic-release analysis
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for semantic-release
          token: ${{ secrets.SEMANTIC_RELEASE_PAT }}  # PAT for authentication

      # Install Python build tools for package creation
      - name: Install build dependencies
        run: python -m pip install build

      # Main release step using PSR action
      - name: Create and Publish Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.2.0
        with:
          verbosity: '1'  # Enable verbose output for debugging
          # Use PAT for authentication (more secure than SSH keys)
          github_token: ${{ secrets.SEMANTIC_RELEASE_PAT }}
          # Enable dry-run mode based on workflow input
          no_operation_mode: ${{ github.event.inputs.dry_run }}

      - name: Publish to GitHub Release
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/publish-action@v10.2.0
        with:
          github_token: ${{ secrets.SEMANTIC_RELEASE_PAT }}
          tag: ${{ steps.release.outputs.tag }}

      # Provide feedback for dry-run mode
      - name: Dry Run Summary
        if: github.event.inputs.dry_run == true && steps.release.outputs.version != ''
        run: |
          {
            echo "## 🛡️ Dry Run Completed"
            echo "A new release **v${{ steps.release.outputs.version }}** is ready."
            echo "The following release notes would be generated:"
            echo "${{ steps.release.outputs.release_notes }}"
          } >> "$GITHUB_STEP_SUMMARY"

      # Provide feedback for successful releases
      - name: Release Summary
        if: steps.release.outputs.released == 'true'
        run: |
          {
            echo "## ✅ Release Successful"
            echo "Version **${{ steps.release.outputs.tag }}** has been successfully published."
          } >> "$GITHUB_STEP_SUMMARY"
