# Manual release workflow using semantic versioning
# Triggered only via GitHub Actions UI to control release timing
# Uses semantic-release for automated versioning and changelog generation
name: Release

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  # Ensure main branch is stable before releasing
  pre-release-checks:
    uses: ./.github/workflows/reusable-checks.yml
    with:
      python-version: "3.13"

  # Create versioned release with automated changelog
  release:
    needs: [pre-release-checks]  # Only run if checks pass
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for semantic-release to push tags and commits

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for semantic-release
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # Install project to ensure package builds correctly
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      # Configure Git for semantic-release commits
      - name: Configure Git
        run: |
          git config user.name "semantic-release (via GitHub Actions)"
          git config user.email "semantic-release@github"

      # Generate version based on conventional commits
      # Updates version files and creates changelog entry
      - name: Version, Tag, and Update Changelog
        id: semantic
        run: |
          # semantic-release analyzes commits since last release
          # Calculates new version (patch/minor/major) and updates files
          semantic-release version --no-vcs-release --no-push
          echo "NEW_TAG=$(semantic-release version --print-tag)" >> $GITHUB_ENV

      # Push the version commit and new tag to main
      - name: Push changes
        run: git push --follow-tags origin main

      # Create GitHub release as draft for manual review
      - name: Create Draft GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Creates draft release with auto-generated notes from commits
          # Draft allows final review before making release public
          gh release create ${{ env.NEW_TAG }} --draft --generate-notes
